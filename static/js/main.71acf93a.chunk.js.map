{"version":3,"sources":["redux/CounterReducer.jsx","components/Counter/Input/Input.jsx","components/commonComponents/Button/Button.jsx","components/Counter/Buttons/Buttons.jsx","components/Counter/Counter.jsx","components/Counter/CounterContainer.js","components/Settings/Settings.jsx","components/Settings/SettingsContainer.js","App.js","serviceWorker.js","redux/Store.js","index.js"],"names":["initialState","settingsInput","maxValueInput","title","FixedValue","currentValue","isActiveErrorStyle","errorValue","startValueInput","counterInput","currentCount","isActiveEnterDisplayStyle","isErrorMaxStyle","buttons","setButton","isDisabled","incButton","resButton","counterReducer","state","action","type","newMaxFixedValue","newStartFixedValue","newMaxCurrentValue","newStartCurrentValue","newCount","count","Input","props","inputClass","maxCountError","counterData","className","value","startValue","Button","disabled","onClick","callbackFunction","Buttons","onInc","onReset","Counter","onIncButton","onResetButton","connect","counter","dispatch","onSetCurrentCount","onSetCurrentCountActionCreator","Settings","htmlFor","SettingsData","onChange","e","onSetNewMaxCurrentValue","target","id","onSetNewStartCurrentValue","onSetButton","SettingsContainer","onSetNewStartCurrentValueInputActionCreator","onSetNewMaxCurrentValueInputActionCreator","App","CounterContainer","React","Component","Boolean","window","location","hostname","match","persistedState","localStorage","getItem","JSON","parse","reducers","combineReducers","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71acf93a.chunk.js","sourcesContent":["const ON_SET_BUTTON = 'ON_SET_BUTTON'\r\nconst ON_NEW_MAX_CURRENT_VALUE_INPUT = \"ON_NEW_MAX_CURRENT_VALUE_INPUT\"\r\nconst ON_NEW_START_CURRENT_VALUE_INPUT = \"ON_NEW_START_CURRENT_VALUE_INPUT\"\r\nconst SET_CURRENT_COUNT = 'SET_CURRENT_COUNT'\r\nconst ON_INC_BUTTON = 'ON_INC_BUTTON'\r\nconst ON_RESET_BUTTON = 'ON_RESET_BUTTON'\r\n\r\nlet initialState = {\r\n    settingsInput: {\r\n        maxValueInput: {\r\n            title: 'max value', FixedValue: 7, currentValue: 7, isActiveErrorStyle: false, errorValue: 21\r\n        },\r\n        startValueInput: {\r\n            title: 'start value',\r\n            FixedValue: 5,\r\n            currentValue: 5,\r\n            isActiveErrorStyle: false,\r\n            errorValue: 0\r\n        }\r\n    },\r\n    counterInput: {\r\n        isActiveErrorStyle: false,\r\n        currentCount: 0,\r\n        isActiveEnterDisplayStyle: false,\r\n        isErrorMaxStyle: false\r\n\r\n    },\r\n    buttons: {\r\n        setButton: {title: 'SET', isDisabled: true},\r\n        incButton: {title: 'INC', isDisabled: false},\r\n        resButton: {title: 'RESET', isDisabled: true}\r\n    }\r\n}\r\nconst counterReducer = (state = initialState, action) => {\r\n\r\n\r\n    if (action.type === ON_SET_BUTTON) {\r\n        let newMaxFixedValue = state.settingsInput.maxValueInput.currentValue\r\n        let newStartFixedValue = state.settingsInput.startValueInput.currentValue\r\n\r\n        return {\r\n            ...state, settingsInput: {\r\n                ...state.settingsInput,\r\n                maxValueInput: {...state.settingsInput.maxValueInput, FixedValue: newMaxFixedValue},\r\n                startValueInput: {...state.settingsInput.startValueInput, FixedValue: newStartFixedValue}\r\n            }, buttons: {\r\n                ...state.buttons,\r\n                setButton: {...state.buttons.setButton, isDisabled: true},\r\n                incButton: {...state.buttons.incButton, isDisabled: false},\r\n            },\r\n            counterInput: {\r\n                ...state.counterInput,\r\n                currentCount: 0,\r\n                isActiveEnterDisplayStyle: false,\r\n                isActiveErrorStyle: false,\r\n                isErrorMaxStyle: false\r\n            }\r\n\r\n        }\r\n    } else if (action.type === ON_NEW_MAX_CURRENT_VALUE_INPUT) {\r\n        if (action.newMaxCurrentValue >= state.settingsInput.maxValueInput.errorValue) {\r\n            return {\r\n                ...state, settingsInput: {\r\n                    ...state.settingsInput,\r\n                    maxValueInput: {\r\n                        ...state.settingsInput.maxValueInput,\r\n                        currentValue: +action.newMaxCurrentValue,\r\n                        isActiveErrorStyle: true\r\n                    },\r\n                }, buttons: {\r\n                    ...state.buttons,\r\n                    setButton: {...state.buttons.setButton, isDisabled: true},\r\n                    incButton: {...state.buttons.incButton, isDisabled: true},\r\n                    resButton: {...state.buttons.resButton, isDisabled: true}\r\n                },\r\n                counterInput: {\r\n                    ...state.counterInput,\r\n                    isActiveEnterDisplayStyle: true,\r\n                    isActiveErrorStyle: true,\r\n                    currentCount: \"Incorrect value\",\r\n                    isErrorMaxStyle: false,\r\n                }\r\n            }\r\n        } else if (action.newMaxCurrentValue <= state.settingsInput.startValueInput.errorValue || action.newMaxCurrentValue <= state.settingsInput.startValueInput.currentValue) {\r\n            return {\r\n                ...state, settingsInput: {\r\n                    ...state.settingsInput,\r\n                    maxValueInput: {\r\n                        ...state.settingsInput.maxValueInput,\r\n                        currentValue: +action.newMaxCurrentValue,\r\n                        isActiveErrorStyle: true\r\n                    },\r\n                    startValueInput: {\r\n                        ...state.settingsInput.startValueInput, isActiveErrorStyle: true\r\n                    }\r\n                }, buttons: {\r\n                    ...state.buttons,\r\n                    setButton: {...state.buttons.setButton, isDisabled: true},\r\n                    incButton: {...state.buttons.incButton, isDisabled: true},\r\n                    resButton: {...state.buttons.resButton, isDisabled: true}\r\n                },\r\n                counterInput: {\r\n                    ...state.counterInput,\r\n                    isActiveEnterDisplayStyle: true,\r\n                    isActiveErrorStyle: true,\r\n                    currentCount: \"Incorrect value\",\r\n                    isErrorMaxStyle: false\r\n                }\r\n            }\r\n        } else if (action.newMaxCurrentValue < state.settingsInput.maxValueInput.errorValue && state.settingsInput.startValueInput.currentValue < state.settingsInput.startValueInput.errorValue) {\r\n            return {\r\n                ...state,\r\n                settingsInput: {\r\n                    ...state.settingsInput,\r\n                    maxValueInput: {\r\n                        ...state.settingsInput.maxValueInput,\r\n                        currentValue: +action.newMaxCurrentValue,\r\n                        isActiveErrorStyle: false\r\n                    },\r\n                },\r\n                buttons: {\r\n                    ...state.buttons,\r\n                    setButton: {...state.buttons.setButton, isDisabled: true},\r\n                    incButton: {...state.buttons.incButton, isDisabled: true},\r\n                    resButton: {...state.buttons.resButton, isDisabled: true}\r\n                },\r\n                counterInput: {\r\n                    ...state.counterInput,\r\n                    isActiveEnterDisplayStyle: true,\r\n                    isActiveErrorStyle: true,\r\n                    currentCount: \"Incorrect value\",\r\n                    isErrorMaxStyle: false\r\n                },\r\n            }\r\n\r\n        } else if (action.newMaxCurrentValue < state.settingsInput.maxValueInput.errorValue && state.settingsInput.startValueInput.currentValue >= state.settingsInput.startValueInput.errorValue) {\r\n            return {\r\n                ...state,\r\n                settingsInput: {\r\n                    ...state.settingsInput,\r\n                    maxValueInput: {\r\n                        ...state.settingsInput.maxValueInput,\r\n                        currentValue: +action.newMaxCurrentValue,\r\n                        isActiveErrorStyle: false\r\n                    },\r\n                    startValueInput: {\r\n                        ...state.settingsInput.startValueInput,\r\n\r\n                        isActiveErrorStyle: false,\r\n                    }\r\n                },\r\n                buttons: {\r\n                    ...state.buttons,\r\n                    setButton: {...state.buttons.setButton, isDisabled: false},\r\n                    incButton: {...state.buttons.incButton, isDisabled: true},\r\n                    resButton: {...state.buttons.resButton, isDisabled: true}\r\n                },\r\n                counterInput: {\r\n                    ...state.counterInput,\r\n                    isActiveEnterDisplayStyle: true,\r\n                    isActiveErrorStyle: false,\r\n                    currentCount: \"Enter values and press 'set'\",\r\n                    isErrorMaxStyle: false\r\n                },\r\n            }\r\n\r\n        } else {\r\n            return {\r\n                ...state,\r\n                settingsInput: {\r\n                    ...state.settingsInput,\r\n                    maxValueInput: {\r\n                        ...state.settingsInput.maxValueInput,\r\n                        currentValue: +action.newMaxCurrentValue,\r\n                        isActiveErrorStyle: false\r\n                    },\r\n                },\r\n                buttons: {\r\n                    ...state.buttons,\r\n                    setButton: {...state.buttons.setButton, isDisabled: false},\r\n                    incButton: {...state.buttons.incButton, isDisabled: true},\r\n                    resButton: {...state.buttons.resButton, isDisabled: true}\r\n                },\r\n                counterInput: {\r\n                    ...state.counterInput,\r\n                    isActiveEnterDisplayStyle: true,\r\n                    isActiveErrorStyle: false,\r\n                    currentCount: \"Enter values and press 'set'\",\r\n                    isErrorMaxStyle: false\r\n                },\r\n            }\r\n        }\r\n\r\n\r\n    } else if (action.type === ON_NEW_START_CURRENT_VALUE_INPUT) {\r\n        if (action.newStartCurrentValue < state.settingsInput.startValueInput.errorValue) {\r\n            return {\r\n                ...state,\r\n                settingsInput: {\r\n                    ...state.settingsInput,\r\n                    startValueInput: {\r\n                        ...state.settingsInput.startValueInput,\r\n                        currentValue: +action.newStartCurrentValue,\r\n                        isActiveErrorStyle: true\r\n                    }, maxValueInput: {...state.settingsInput.maxValueInput}\r\n                },\r\n                buttons: {\r\n                    ...state.buttons,\r\n                    setButton: {...state.buttons.setButton, isDisabled: true},\r\n                    incButton: {...state.buttons.incButton, isDisabled: true},\r\n                    resButton: {...state.buttons.resButton, isDisabled: true}\r\n                },\r\n                counterInput: {\r\n                    ...state.counterInput,\r\n                    isActiveEnterDisplayStyle: true,\r\n                    isActiveErrorStyle: true,\r\n                    currentCount: \"Incorrect value\",\r\n                    isErrorMaxStyle: false\r\n                }\r\n\r\n            }\r\n        } else if (action.newStartCurrentValue >= state.settingsInput.maxValueInput.errorValue || action.newStartCurrentValue >= state.settingsInput.maxValueInput.currentValue) {\r\n            return {\r\n                ...state,\r\n                settingsInput: {\r\n                    ...state.settingsInput,\r\n                    startValueInput: {\r\n                        ...state.settingsInput.startValueInput,\r\n                        currentValue: +action.newStartCurrentValue,\r\n                        isActiveErrorStyle: true\r\n                    }, maxValueInput: {...state.settingsInput.maxValueInput, isActiveErrorStyle: true}\r\n                },\r\n                buttons: {\r\n                    ...state.buttons,\r\n                    setButton: {...state.buttons.setButton, isDisabled: true},\r\n                    incButton: {...state.buttons.incButton, isDisabled: true},\r\n                    resButton: {...state.buttons.resButton, isDisabled: true}\r\n                },\r\n                counterInput: {\r\n                    ...state.counterInput,\r\n                    isActiveEnterDisplayStyle: true,\r\n                    isActiveErrorStyle: true,\r\n                    currentCount: \"Incorrect value\",\r\n                    isErrorMaxStyle: false\r\n                }\r\n\r\n            }\r\n        } else if (action.newStartCurrentValue < state.settingsInput.maxValueInput.currentValue && state.settingsInput.maxValueInput.currentValue > state.settingsInput.maxValueInput.errorValue) {\r\n            return {\r\n                ...state,\r\n                settingsInput: {\r\n                    ...state.settingsInput,\r\n                    startValueInput: {\r\n                        ...state.settingsInput.startValueInput,\r\n                        currentValue: +action.newStartCurrentValue,\r\n                        isActiveErrorStyle: false}\r\n                    // }, maxValueInput: {...state.settingsInput.maxValueInput, isActiveErrorStyle: false}\r\n                },\r\n                buttons: {\r\n                    ...state.buttons,\r\n                    setButton: {...state.buttons.setButton, isDisabled: true},\r\n                    incButton: {...state.buttons.incButton, isDisabled: true},\r\n                    resButton: {...state.buttons.resButton, isDisabled: true}\r\n                },\r\n                counterInput: {\r\n                    ...state.counterInput,\r\n                    isActiveEnterDisplayStyle: true,\r\n                    isActiveErrorStyle: true,\r\n                    currentCount: \"Incorrect value\",\r\n                    isErrorMaxStyle: false\r\n                }\r\n\r\n            }}\r\n        else if (action.newStartCurrentValue < state.settingsInput.maxValueInput.currentValue && state.settingsInput.maxValueInput.currentValue < state.settingsInput.maxValueInput.errorValue) {\r\n                return {\r\n                    ...state,\r\n                    settingsInput: {\r\n                        ...state.settingsInput,\r\n                        startValueInput: {\r\n                            ...state.settingsInput.startValueInput,\r\n                            currentValue: +action.newStartCurrentValue,\r\n                            isActiveErrorStyle: false}\r\n                        ,maxValueInput: {...state.settingsInput.maxValueInput, isActiveErrorStyle: false}\r\n                    },\r\n                    buttons: {\r\n                        ...state.buttons,\r\n                        setButton: {...state.buttons.setButton, isDisabled: false},\r\n                        incButton: {...state.buttons.incButton, isDisabled: true},\r\n                        resButton: {...state.buttons.resButton, isDisabled: true}\r\n                    },\r\n                    counterInput: {\r\n                        ...state.counterInput,\r\n                        isActiveEnterDisplayStyle: true,\r\n                        isActiveErrorStyle: false,\r\n                        currentCount: \"Enter values and press 'set'\",\r\n                        isErrorMaxStyle: false\r\n                    }\r\n\r\n                }\r\n        }\r\n        else if (action.newStartCurrentValue > state.settingsInput.startValueInput.errorValue && state.settingsInput.maxValueInput.currentValue >= state.settingsInput.maxValueInput.errorValue) {\r\n            return {\r\n                ...state,\r\n                settingsInput: {\r\n                    ...state.settingsInput,\r\n                    startValueInput: {\r\n                        ...state.settingsInput.startValueInput,\r\n                        currentValue: +action.newStartCurrentValue,\r\n                        isActiveErrorStyle: false}\r\n                    ,\r\n                },\r\n                buttons: {\r\n                    ...state.buttons,\r\n                    setButton: {...state.buttons.setButton, isDisabled: true},\r\n                    incButton: {...state.buttons.incButton, isDisabled: true},\r\n                    resButton: {...state.buttons.resButton, isDisabled: true}\r\n                },\r\n                counterInput: {\r\n                    ...state.counterInput,\r\n                    isActiveEnterDisplayStyle: true,\r\n                    isActiveErrorStyle: true,\r\n                    currentCount: \"Incorrect value\",\r\n                    isErrorMaxStyle: false\r\n                }\r\n\r\n            }\r\n        }\r\n        else return {\r\n            ...state,\r\n            settingsInput: {\r\n                ...state.settingsInput,\r\n                startValueInput: {\r\n                    ...state.settingsInput.startValueInput,\r\n                    currentValue: +action.newStartCurrentValue,\r\n                    isActiveErrorStyle: false\r\n                }, maxValueInput: {...state.settingsInput.maxValueInput,}\r\n            },\r\n            buttons: {\r\n                ...state.buttons,\r\n                setButton: {...state.buttons.setButton, isDisabled: false},\r\n                incButton: {...state.buttons.incButton, isDisabled: true},\r\n                resButton: {...state.buttons.resButton, isDisabled: true}\r\n            },\r\n            counterInput: {\r\n                ...state.counterInput,\r\n                isActiveEnterDisplayStyle: true,\r\n                isActiveErrorStyle: false,\r\n                currentCount: \"Enter values and press 'set'\",\r\n                isErrorMaxStyle: false\r\n            }\r\n\r\n        }\r\n    } else if (action.type === ON_INC_BUTTON) {\r\n        let newCount = 0\r\n        if (state.counterInput.currentCount === 0) {\r\n            newCount = state.settingsInput.startValueInput.FixedValue\r\n        } else {\r\n            newCount = state.counterInput.currentCount\r\n        }\r\n        newCount++\r\n        if (newCount === state.settingsInput.maxValueInput.FixedValue) {\r\n            return {\r\n                ...state, counterInput: {...state.counterInput, currentCount: newCount,  isErrorMaxStyle: true},\r\n                buttons: {\r\n                    ...state.buttons,\r\n                    incButton: {...state.buttons.incButton, isDisabled: true},\r\n                    resButton: {...state.buttons.resButton, isDisabled: false}\r\n                }\r\n            }\r\n        } else\r\n            return {\r\n                ...state, counterInput: {...state.counterInput, currentCount: newCount},\r\n                buttons: {\r\n                    ...state.buttons,\r\n                    incButton: {...state.buttons.incButton, isDisabled: false},\r\n                    resButton: {...state.buttons.resButton, isDisabled: false}\r\n                }\r\n            }\r\n    } else if (action.type === ON_RESET_BUTTON) {\r\n        return {\r\n            ...state, counterInput: {...state.counterInput,  isErrorMaxStyle: false, currentCount: 0},\r\n            buttons: {\r\n                ...state.buttons,\r\n                incButton: {...state.buttons.incButton, isDisabled: false},\r\n                resButton: {...state.buttons.resButton, isDisabled: true}\r\n            }\r\n        }\r\n    } else if (action.type === SET_CURRENT_COUNT) {\r\n        return {\r\n            ...state, counterInput: {...state.counterInput, currentCount: action.count},\r\n            buttons: {\r\n                ...state.buttons,\r\n                incButton: {...state.buttons.incButton, isDisabled: false},\r\n                resButton: {...state.buttons.resButton, isDisabled: true}\r\n            }\r\n        }\r\n    }\r\n    return state\r\n}\r\n\r\nexport default counterReducer\r\n\r\nexport const onSetButtonActionCreator = () => ({\r\n    type: ON_SET_BUTTON,\r\n})\r\nexport const onSetNewMaxCurrentValueInputActionCreator = (newMaxCurrentValue) => ({\r\n    type: ON_NEW_MAX_CURRENT_VALUE_INPUT, newMaxCurrentValue\r\n})\r\nexport const onSetNewStartCurrentValueInputActionCreator = (newStartCurrentValue) => ({\r\n    type: ON_NEW_START_CURRENT_VALUE_INPUT, newStartCurrentValue\r\n})\r\nexport const onIncButtonActionCreator = () => ({type: ON_INC_BUTTON})\r\nexport const onResetButtonActionCreator = () => ({type: ON_RESET_BUTTON})\r\nexport const onSetCurrentCountActionCreator = (count) => ({type: SET_CURRENT_COUNT, count})","import React from 'react';\n\nconst Input = (props) => {debugger\n    let inputClass=null\n    if (props.maxCountError){inputClass= 'activeBig'}\n    else if(props.counterData.isActiveErrorStyle){inputClass= 'active'}\n    else if(props.counterData.isActiveEnterDisplayStyle){inputClass= 'valueInput'}\n\n    else{inputClass=''}\n    return (\n\n        <div className='input'>\n            <input  className={inputClass} value={props.counterData.currentCount === 0 ? props.startValue : props.counterData.currentCount}\n                   type=\"text\"/>\n        </div>\n    )\n}\nexport default Input\n","import React from 'react';\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <button disabled={props.isDisabled} onClick={()=>{props.callbackFunction()}}>{props.title}</button>\r\n    );\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\nimport Button from \"../../commonComponents/Button/Button\";\n\nconst Buttons = (props) => {\n    return (\n        <div className=\"buttonsWrapperInner\">\n            <Button isDisabled={props.buttons.incButton.isDisabled} callbackFunction={props.onInc}\n                    title={props.buttons.incButton.title}/>\n            <Button isDisabled={props.buttons.resButton.isDisabled} callbackFunction={props.onReset}\n                    title={props.buttons.resButton.title}/>\n        </div>\n    );\n}\n\nexport default Buttons;\n","import React from 'react';\r\nimport Input from \"./Input/Input\";\r\nimport Buttons from \"./Buttons/Buttons\";\r\n\r\nconst Counter = (props) => {\r\n    return (\r\n        <div className='counter_wrapper'>\r\n            <div className='counter_displayWrapper'>\r\n            <Input  maxCountError={props.maxCountError} startValue={props.startValue}   counterData={props.counterData} />\r\n            </div >\r\n            <div className='counter_buttonsWrapper'>\r\n            <Buttons  buttons={props.buttons} onInc={props.onIncButton} onReset={props.onResetButton}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Counter;\r\n","import {\r\n    onIncButtonActionCreator,\r\n    onResetButtonActionCreator, onSetCurrentCountActionCreator,\r\n} from \"../../redux/CounterReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport Counter from \"./Counter\";\r\nimport React from \"react\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        counterData: state.counter.counterInput,\r\n        buttons: state.counter.buttons,\r\n        maxCountError:state.counter.counterInput.isErrorMaxStyle,\r\n        startValue:state.counter.settingsInput.startValueInput.FixedValue\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onIncButton: () => {\r\n            dispatch(onIncButtonActionCreator())\r\n        },\r\n        onResetButton: () => {\r\n            dispatch(onResetButtonActionCreator())\r\n        },\r\n        onSetCurrentCount: (count) => {\r\n            dispatch(onSetCurrentCountActionCreator(count))\r\n        }\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter)\r\n\r\n\r\n","import React from 'react';\r\nimport Button from \"../commonComponents/Button/Button\";\r\n\r\nconst Settings = (props) => {\r\n    const onSetNewMaxCurrentValue = (e) => {\r\n        props.onSetNewMaxCurrentValue(e.target.value)\r\n    }\r\n    const onSetNewStartCurrentValue = (e) => {\r\n        props.onSetNewStartCurrentValue(e.target.value)\r\n    }\r\n    return (\r\n        <div className={'settings_wrapper'}>\r\n            <div className={'settings_display'}>\r\n                <div className='settings_display-maxValue'>\r\n\r\n                    <label htmlFor=\"maxValue\">Max Value</label>\r\n                    <input className={props.SettingsData.settingsInput.maxValueInput.isActiveErrorStyle? 'inputError':''} onChange={onSetNewMaxCurrentValue} type=\"number\" id='maxValue'\r\n                           value={props.SettingsData.settingsInput.maxValueInput.currentValue}/>\r\n                </div>\r\n                <div className='settings_display-startvalue'>\r\n                    <label htmlFor=\"startValue\">Start Value</label>\r\n                    <input className={props.SettingsData.settingsInput.startValueInput.isActiveErrorStyle? 'inputError':''} onChange={onSetNewStartCurrentValue} type=\"number\" id='startValue'\r\n                           value={props.SettingsData.settingsInput.startValueInput.currentValue}/>\r\n                </div>\r\n            </div>\r\n            <div className={'settings_button'}>\r\n                <Button isDisabled={props.SettingsData.buttons.setButton.isDisabled}\r\n                        callbackFunction={props.onSetButton}\r\n                        title={props.SettingsData.buttons.setButton.title}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;\r\n","import {connect} from \"react-redux\";\r\nimport Settings from \"./Settings\";\r\nimport {\r\n    onSetButtonActionCreator,\r\n    onSetNewMaxCurrentValueInputActionCreator,\r\n    onSetNewStartCurrentValueInputActionCreator\r\n} from \"../../redux/CounterReducer\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        SettingsData: state.counter\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSetNewStartCurrentValue: (newStartCurrentValue) => {\r\n            dispatch(onSetNewStartCurrentValueInputActionCreator(newStartCurrentValue))\r\n        },\r\n        onSetNewMaxCurrentValue: (newMaxCurrentValue) => {\r\n            dispatch(onSetNewMaxCurrentValueInputActionCreator(newMaxCurrentValue))\r\n        },\r\n        onSetButton: () => {\r\n            dispatch(onSetButtonActionCreator())\r\n        }\r\n    }\r\n}\r\nconst SettingsContainer = connect(mapStateToProps, mapDispatchToProps)(Settings)\r\nexport default SettingsContainer\r\n\r\n","import React from 'react';\nimport './App.css';\nimport CounterContainer from \"./components/Counter/CounterContainer\";\nimport SettingsContainer from \"./components/Settings/SettingsContainer\";\n\nclass App extends React.Component {\n\n    render() {\n\n\n        return (\n            <div className='App_wrapper'>\n            <div className=\"App\">\n                <SettingsContainer/>\n                <CounterContainer/>\n            </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\r\nimport counterReducer from \"./CounterReducer\";\r\n\r\n\r\nconst persistedState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')) : {}\r\n\r\nlet reducers = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nconst store = createStore(reducers, persistedState)\r\nstore.subscribe(() => {\r\n    localStorage.setItem('reduxState', JSON.stringify(store.getState()))\r\n})\r\nexport default store\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/Store\";\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}